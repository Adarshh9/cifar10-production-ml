name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: cifar10-ml-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy API to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
          
          # Stop old container
          docker stop ml-api || true
          docker rm ml-api || true
          
          # Pull and run new container
          docker pull ${{ secrets.ECR_REPOSITORY }}:latest
          docker run -d \
            --name ml-api \
            --restart unless-stopped \
            -p 8000:8000 \
            -e REDIS_HOST=localhost \
            -e REDIS_PORT=6379 \
            --network host \
            ${{ secrets.ECR_REPOSITORY }}:latest
          
          # Cleanup old images
          docker image prune -af
    
    - name: Deploy Frontend to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "frontend/*"
        target: "~/"
    
    - name: Start Frontend Container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop old frontend
          docker stop frontend || true
          docker rm frontend || true
          
          # Run with custom nginx config
          docker run -d \
            --name frontend \
            --restart unless-stopped \
            --network host \
            -v ~/frontend/index.html:/usr/share/nginx/html/index.html:ro \
            -v ~/frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
            nginx:alpine

    - name: Wait for services to start
      run: |
        echo "⏳ Waiting for services to initialize..."
        sleep 60
    
    - name: Verify API deployment
      run: |
        echo "🔍 Checking API health..."
        MAX_RETRIES=10
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f --connect-timeout 5 http://${{ secrets.EC2_HOST }}:8000/health; then
            echo "✅ API is healthy!"
            exit 0
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "⏳ Attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying in 10s..."
          sleep 10
        done
        
        echo "❌ API health check failed after $MAX_RETRIES attempts"
        exit 1
    
    - name: Verify Frontend deployment
      run: |
        echo "🔍 Checking Frontend..."
        if curl -f --connect-timeout 5 http://${{ secrets.EC2_HOST }}/ > /dev/null 2>&1; then
          echo "✅ Frontend is accessible!"
        else
          echo "⚠️ Frontend check failed (non-critical)"
        fi

    - name: Deployment success notification
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🌐 Frontend:  http://${{ secrets.EC2_HOST }}"
        echo "🚀 API:       http://${{ secrets.EC2_HOST }}:8000"
        echo "📚 API Docs:  http://${{ secrets.EC2_HOST }}:8000/docs"
        echo "📊 Metrics:   http://${{ secrets.EC2_HOST }}:8000/metrics"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
