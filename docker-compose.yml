# version: '3.8'

services:
  # MLflow Tracking Server
  mlflow:
    image: python:3.10-slim
    container_name: mlflow
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    working_dir: /mlflow
    command: >
      sh -c "
        pip install mlflow==2.8.0 &&
        mlflow server
        --backend-store-uri sqlite:////mlflow/mlflow.db
        --default-artifact-root /mlflow/artifacts
        --host 0.0.0.0
        --port 5000
        --gunicorn-opts '--bind 0.0.0.0:5000'
      "
    networks:
      - ml-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ml-network
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: mlops_db
      POSTGRES_USER: mlops_user
      POSTGRES_PASSWORD: changeme
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ml-network
  
  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml-api
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    depends_on:
      - mlflow
      - redis
      - postgres
    volumes:
      - ./models:/app/models
      - ./src:/app/src
    networks:
      - ml-network
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ml-network
  
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - ml-network
  
  # Node Exporter (system metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - ml-network

volumes:
  mlflow_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  ml-network:
    driver: bridge
